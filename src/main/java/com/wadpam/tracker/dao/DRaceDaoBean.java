package com.wadpam.tracker.dao;

import com.google.appengine.api.blobstore.BlobKey;
import com.google.appengine.api.blobstore.BlobstoreInputStream;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.wadpam.tracker.api.PublicResource;
import com.wadpam.tracker.domain.DParticipant;
import com.wadpam.tracker.domain.DRace;
import com.wadpam.tracker.domain.DSplit;
import com.wadpam.tracker.domain.TrackPoint;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.TimeZone;
import java.util.TreeMap;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import net.sf.mardao.core.geo.Geobox;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Implementation of Business Methods related to entity DRace.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 *
 * Generated on 2014-01-24T20:26:57.207+0100.
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class DRaceDaoBean 
	extends GeneratedDRaceDaoImpl
		implements DRaceDao 
{
    /** 2014-01-25T09:01:35.000Z */
    public static final SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

    static {
        SDF.setTimeZone(TimeZone.getTimeZone("GMT"));
    }
    
    @Override
    public TrackPoint findNearest(Object raceKey, long minTimestamp, Float lat, Float lon) {
        TrackPoint nearest = null;
        double dMin = Double.MAX_VALUE;
        DRace race = findByPrimaryKey(raceKey);
        
        for (TrackPoint p : getTrack(race.getBlobKey())) {
            if (minTimestamp <= p.getT()) {
                if (null == lat) {
                    return p;
                }
                double d = Geobox.distance(p.getLat(), p.getLon(), lat, lon);
                if (d < dMin) {
                    nearest = p;
                    dMin = d;
                }
            }
        }
        return nearest;
    }

    @Override
    public List<TrackPoint> getTrack(BlobKey blobKey) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();
        
        List<TrackPoint> track = (List<TrackPoint>) memcache.get(blobKey.getKeyString());
        if (null == track) {
            track = parseTrack(blobKey);
            memcache.put(blobKey.getKeyString(), track);
        }
        
        return track;
    }

    private List<TrackPoint> parseTrack(BlobKey blobKey) {
        InputStream bis = null;
        try {
            final List<TrackPoint> track = new ArrayList<TrackPoint>();
            bis = new BlobstoreInputStream(blobKey);
            SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
            DefaultHandler handler = new DefaultHandler() {

                private TrackPoint trkpt;
                private StringBuilder text = new StringBuilder();
                //private Object raceKey;
                private long startTime = 0l;
                private double distance = 0.0;
                private Float dLat = null, dLon = null;

                @Override
                public void startDocument() throws SAXException {
                }
                
                @Override
                public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                    if ("trk".equalsIgnoreCase(qName)) {
                    }
                    else if ("trkpt".equalsIgnoreCase(qName)) {
                        trkpt = new TrackPoint();
                        float lat = Float.parseFloat(attributes.getValue("lat"));
                        float lon = Float.parseFloat(attributes.getValue("lon"));
                        trkpt.setLat(lat);
                        trkpt.setLon(lon);
                        
                        if (null == dLat) {
                        }
                        else {
                            double d = Geobox.distance(dLat, dLon, lat, lon);
                            distance += d;
                        }
                        trkpt.setD(Double.valueOf(distance).floatValue());
                        dLat = lat;
                        dLon = lon;
                        
                        //LOG.trace("Created trkpt for {}, {}", lat, lon);
                    }
                    else if ("ele".equalsIgnoreCase(qName) || "time".equalsIgnoreCase(qName)) {
                        text = new StringBuilder();
                    }
                }

                @Override
                public void characters(char[] ch, int start, int length) throws SAXException {
                    text.append(ch, start, length);
                }
                
                @Override
                public void endElement(String uri, String localName, String qName) throws SAXException {
                    if ("ele".equalsIgnoreCase(qName)) {
                        trkpt.setAlt(Float.valueOf(text.toString()));
                    }
                    // there can be a time tag within <metadata>
                    else if ("time".equalsIgnoreCase(qName) && null != trkpt) {
                        try {
                            Date t = SDF.parse(text.toString());
                            //LOG.info("time {} parsed into {}", text.toString(), t);
                            if (0l  == startTime) {
                                startTime = t.getTime();
                            }
                            trkpt.setT(t.getTime() - startTime);
                        } catch (ParseException ex) {
                            LOG.warn("time", ex);
                        }
                    }
                    else if ("trkpt".equalsIgnoreCase(qName)) {
                        track.add(trkpt);
                    }
                }

                
            };
            
            parser.parse(bis, handler);
            
            return track;
        } catch (ParserConfigurationException ex) {
            LOG.error("Creating parser", ex);
        } catch (SAXException ex) {
            LOG.error("Parsing", ex);
        } catch (IOException ex) {
            LOG.error("Error parsing track blob", ex);
        } finally {
            try {
                bis.close();
            } catch (IOException ex) {
            }
        }
        return null;
    }

}
